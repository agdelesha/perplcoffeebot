from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from bot.config.config import ADMIN_ID
from bot.database.db import (
    is_admin, add_admin, remove_admin,
    get_user_bonuses, update_user_bonuses, get_all_admins
)
from bot.keyboards.keyboards import get_admin_keyboard, get_client_keyboard

class AdminStates(StatesGroup):
    waiting_for_admin_id = State()
    waiting_for_admin_action = State()
    waiting_for_bonus_user_id = State()
    waiting_for_bonus_amount = State()
    waiting_for_message_user_id = State()
    waiting_for_message_text = State()

async def admin_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –æ–±—ã—á–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
    if user_id != ADMIN_ID and not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = get_admin_keyboard()
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def process_admin_user(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
    if message.from_user.id != ADMIN_ID:  # –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = get_all_admins()  
    admin_info = "\n".join([f"ID: {admin['id']}" for admin in admins])
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    
    await AdminStates.waiting_for_admin_id.set()
    await message.answer(
        f"üë§ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n{admin_info}\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–æ–º:",
        reply_markup=keyboard
    )

async def process_admin_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
    try:
        admin_id = int(message.text)
        if admin_id == ADMIN_ID:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await state.finish()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–æ–º
        if is_admin(admin_id):
            # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            if remove_admin(admin_id):
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            if add_admin(admin_id, message.from_user.id):
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
        await state.finish()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return

async def process_manual_bonus(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –≤—Ä—É—á–Ω—É—é"""
    if message.from_user.id != ADMIN_ID and not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    
    await AdminStates.waiting_for_bonus_user_id.set()
    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã:",
        reply_markup=keyboard
    )

async def process_bonus_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å":
        await state.finish()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_admin_keyboard())
        return

    try:
        user_id = int(message.text)
        await state.update_data(bonus_user_id=user_id)
        
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
        
        await AdminStates.waiting_for_bonus_amount.set()
        await message.answer(
            "üí´ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).",
            reply_markup=get_admin_keyboard()
        )
        await state.finish()
        return

async def process_bonus_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å":
        await state.finish()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_admin_keyboard())
        return

    try:
        amount = int(message.text)
        data = await state.get_data()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {data}")
        
        if 'bonus_user_id' not in data:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_admin_keyboard()
            )
            await state.finish()
            return
            
        user_id = data['bonus_user_id']
        
        current_bonuses = get_user_bonuses(user_id)
        new_bonuses = current_bonuses + amount
        
        if new_bonuses < 0:
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤.",
                reply_markup=get_admin_keyboard()
            )
            await state.finish()
            return
        
        update_user_bonuses(user_id, new_bonuses)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        bonus_word = get_bonus_word(amount)
        await message.answer(
            f"‚úÖ –ë–æ–Ω—É—Å—ã –∏–∑–º–µ–Ω–µ–Ω—ã!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"{'‚ûï' if amount >= 0 else '‚ûñ'} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {abs(amount)} {bonus_word}\n"
            f"üí´ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_bonuses} {get_bonus_word(new_bonuses)}",
            reply_markup=get_admin_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            if amount > 0:
                await message.bot.send_message(
                    user_id,
                    f"‚ú® –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} {bonus_word}!\n"
                    f"üí´ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_bonuses} {get_bonus_word(new_bonuses)}"
                )
            else:
                await message.bot.send_message(
                    user_id,
                    f"üìù –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {abs(amount)} {bonus_word}\n"
                    f"üí´ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_bonuses} {get_bonus_word(new_bonuses)}"
                )
        except Exception as e:
            await message.answer(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}",
                reply_markup=get_admin_keyboard()
            )
        
        await state.finish()
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–Ω—É—Å–æ–≤.",
            reply_markup=get_admin_keyboard()
        )
        await state.finish()
        return

async def process_send_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.from_user.id != ADMIN_ID and not is_admin(message.from_user.id):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            reply_markup=get_client_keyboard()
        )
        return
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    
    await AdminStates.waiting_for_message_user_id.set()
    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )

async def process_message_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å":
        await state.finish()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_admin_keyboard())
        return

    try:
        user_id = int(message.text)
        await state.update_data(message_user_id=user_id)
        
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
        
        await AdminStates.waiting_for_message_text.set()
        await message.answer(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).",
            reply_markup=get_admin_keyboard()
        )
        await state.finish()
        return

async def process_message_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å":
        await state.finish()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_admin_keyboard())
        return

    data = await state.get_data()
    user_id = data.get('message_user_id')
    
    if not user_id:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_admin_keyboard()
        )
        await state.finish()
        return
    
    try:
        await message.bot.send_message(user_id, message.text)
        await message.answer(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}",
            reply_markup=get_admin_keyboard()
        )
    
    await state.finish()

async def cancel_admin_action(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_admin_keyboard()
        )

async def return_to_main_menu(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_client_keyboard())

def get_bonus_word(amount):
    if abs(amount) == 1:
        return "–±–æ–Ω—É—Å"
    elif 2 <= abs(amount) <= 4:
        return "–±–æ–Ω—É—Å–∞"
    else:
        return "–±–æ–Ω—É—Å–æ–≤"
